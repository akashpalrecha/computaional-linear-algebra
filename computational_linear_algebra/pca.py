# AUTOGENERATED! DO NOT EDIT! File to edit: 03_PCA.ipynb (unless otherwise specified).

__all__ = ['stats', 'torchCov', 'Arrow3D']

# Cell
import torch
import torchvision
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Cell
def stats(*args):
    for x in args:
        print("Type : ", type(x))
        print("Shape: ", x.shape)
        print("Sum  : ", x.sum())
        print("Mean : ", x.mean())
        print("STD  : ", x.std())
        print()

# Cell
def torchCov(matrix:torch.Tensor, transposed=False):
    "Transposed = True if individual samples are columns and not rows"
    if not isinstance(matrix, torch.Tensor): matrix = torch.tensor(matrix)
    if torch.cuda.is_available(): matrix = matrix.cuda()
    m = matrix.T if transposed else matrix
    n = m.shape[0]
    mean = m.mean(axis=0, keepdim=True)
    m.sub_(mean)
    return (m.T @ m) * 1 / (n-1)

# Cell
from matplotlib.patches import FancyArrowPatch

# Cell
class Arrow3D(FancyArrowPatch):
    def __init__(self, xs, ys, zs, *args, **kwargs):
        FancyArrowPatch.__init__(self, (0,0), (0,0), *args, **kwargs)
        self._verts3d = xs, ys, zs

    def draw(self, renderer):
        xs3d, ys3d, zs3d = self._verts3d
        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)
        self.set_positions((xs[0], ys[0]), (xs[1], ys[1]))
        FancyArrowPatch.draw(self, renderer)

# Cell
from sklearn.decomposition import PCA